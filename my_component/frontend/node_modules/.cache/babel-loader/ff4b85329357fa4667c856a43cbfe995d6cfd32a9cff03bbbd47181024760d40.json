{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andr\\xE9 Scudiere\\\\Documents\\\\Streamlit Component\\\\st_drag_n_drop\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { withStreamlitConnection, Streamlit } from \"streamlit-component-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KanbanBoard({\n  args,\n  setComponentValue,\n  disabled,\n  theme,\n  width\n}) {\n  _s();\n  const {\n    columns\n  } = args;\n\n  // Use useMemo to ensure initialColumns only changes if columns changes\n  const initialColumns = useMemo(() => {\n    return columns && Array.isArray(columns) ? columns : [];\n  }, [columns]);\n  const [currentColumns, setCurrentColumns] = useState(initialColumns);\n  useEffect(() => {\n    setCurrentColumns(initialColumns);\n  }, [initialColumns]);\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) return;\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    }\n    const newColumns = Array.from(currentColumns);\n    const sourceColIndex = newColumns.findIndex(col => col.id === source.droppableId);\n    const destColIndex = newColumns.findIndex(col => col.id === destination.droppableId);\n    const [movedCard] = newColumns[sourceColIndex].cards.splice(source.index, 1);\n    newColumns[destColIndex].cards.splice(destination.index, 0, movedCard);\n    setCurrentColumns(newColumns);\n    setComponentValue === null || setComponentValue === void 0 ? void 0 : setComponentValue({\n      columns: newColumns\n    });\n  };\n\n  // On mount or when columns change, always set the current value back to Python\n  useEffect(() => {\n    Streamlit.setFrameHeight();\n    setComponentValue === null || setComponentValue === void 0 ? void 0 : setComponentValue({\n      columns: currentColumns\n    });\n  }, [currentColumns, setComponentValue]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '20px',\n          width: '100%',\n          overflowX: 'auto'\n        },\n        children: [currentColumns.map(col => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: col.id,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            style: {\n              background: '#FAFAFA',\n              padding: '10px',\n              borderRadius: '8px',\n              width: '300px',\n              minHeight: '250px',\n              boxSizing: 'border-box'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: col.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this), col.cards.map((card, cardIndex) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: card.id,\n              index: cardIndex,\n              children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                style: {\n                  userSelect: 'none',\n                  padding: '8px',\n                  margin: '0 0 8px 0',\n                  borderRadius: '4px',\n                  background: '#fff',\n                  border: `2px solid ${card.color || '#000'}`,\n                  boxShadow: snapshot.isDragging ? '0 2px 8px rgba(0,0,0,0.2)' : 'none',\n                  ...provided.draggableProps.style\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: card.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 27\n                }, this), Array.isArray(card.fields) && card.fields.map((field, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: field\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 29\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 25\n              }, this)\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 21\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this)\n        }, col.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)), currentColumns.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"No columns to display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(KanbanBoard, \"nxbEeUkbzypcY0m8XH4yCywiEpo=\");\n_c = KanbanBoard;\nexport default _c2 = withStreamlitConnection(KanbanBoard);\nvar _c, _c2;\n$RefreshReg$(_c, \"KanbanBoard\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","DragDropContext","Droppable","Draggable","withStreamlitConnection","Streamlit","jsxDEV","_jsxDEV","KanbanBoard","args","setComponentValue","disabled","theme","width","_s","columns","initialColumns","Array","isArray","currentColumns","setCurrentColumns","onDragEnd","result","source","destination","droppableId","index","newColumns","from","sourceColIndex","findIndex","col","id","destColIndex","movedCard","cards","splice","setFrameHeight","style","children","display","gap","overflowX","map","provided","ref","innerRef","droppableProps","background","padding","borderRadius","minHeight","boxSizing","title","fileName","_jsxFileName","lineNumber","columnNumber","card","cardIndex","draggableId","snapshot","draggableProps","dragHandleProps","userSelect","margin","border","color","boxShadow","isDragging","name","fields","field","i","placeholder","length","_c","_c2","$RefreshReg$"],"sources":["C:/Users/AndrÃ© Scudiere/Documents/Streamlit Component/st_drag_n_drop/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { useState, useEffect, ReactElement, useMemo } from 'react'\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd'\r\nimport { withStreamlitConnection, ComponentProps, Streamlit } from \"streamlit-component-lib\"\r\n\r\ninterface Card {\r\n  id: string\r\n  name: string\r\n  fields: string[]\r\n  color?: string\r\n}\r\n\r\ninterface Column {\r\n  id: string\r\n  title: string\r\n  cards: Card[]\r\n}\r\n\r\ninterface KanbanArgs {\r\n  columns?: Column[]  // columns can be undefined or empty\r\n}\r\n\r\ninterface KanbanBoardProps extends ComponentProps {\r\n  args: KanbanArgs\r\n  setComponentValue?: (value: any) => void\r\n}\r\nfunction KanbanBoard({ args, setComponentValue, disabled, theme, width }: KanbanBoardProps): ReactElement {\r\n  const { columns } = args\r\n  \r\n  // Use useMemo to ensure initialColumns only changes if columns changes\r\n  const initialColumns = useMemo(() => {\r\n    return (columns && Array.isArray(columns)) ? columns : []\r\n  }, [columns])\r\n\r\n  const [currentColumns, setCurrentColumns] = useState<Column[]>(initialColumns)\r\n\r\n  useEffect(() => {\r\n    setCurrentColumns(initialColumns)\r\n  }, [initialColumns])\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { source, destination } = result\r\n    if (!destination) return\r\n\r\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\r\n      return\r\n    }\r\n\r\n    const newColumns = Array.from(currentColumns)\r\n    const sourceColIndex = newColumns.findIndex(col => col.id === source.droppableId)\r\n    const destColIndex = newColumns.findIndex(col => col.id === destination.droppableId)\r\n\r\n    const [movedCard] = newColumns[sourceColIndex].cards.splice(source.index, 1)\r\n    newColumns[destColIndex].cards.splice(destination.index, 0, movedCard)\r\n\r\n    setCurrentColumns(newColumns)\r\n    setComponentValue?.({ columns: newColumns })\r\n  }\r\n\r\n  // On mount or when columns change, always set the current value back to Python\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n    setComponentValue?.({ columns: currentColumns })\r\n  }, [currentColumns, setComponentValue])\r\n\r\n  return (\r\n    <div style={{ width: '100%' }}>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <div style={{ display: 'flex', gap: '20px', width: '100%', overflowX: 'auto' }}>\r\n          {currentColumns.map(col => (\r\n            <Droppable droppableId={col.id} key={col.id}>\r\n              {(provided) => (\r\n                <div\r\n                  ref={provided.innerRef}\r\n                  {...provided.droppableProps}\r\n                  style={{\r\n                    background: '#FAFAFA',\r\n                    padding: '10px',\r\n                    borderRadius: '8px',\r\n                    width: '300px',\r\n                    minHeight: '250px',\r\n                    boxSizing: 'border-box'\r\n                  }}\r\n                >\r\n                  <h3>{col.title}</h3>\r\n                  {col.cards.map((card, cardIndex) => (\r\n                    <Draggable key={card.id} draggableId={card.id} index={cardIndex}>\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          style={{\r\n                            userSelect: 'none',\r\n                            padding: '8px',\r\n                            margin: '0 0 8px 0',\r\n                            borderRadius: '4px',\r\n                            background: '#fff',\r\n                            border: `2px solid ${card.color || '#000'}`,\r\n                            boxShadow: snapshot.isDragging ? '0 2px 8px rgba(0,0,0,0.2)' : 'none',\r\n                            ...provided.draggableProps.style\r\n                          }}\r\n                        >\r\n                          <strong>{card.name}</strong>\r\n                          {Array.isArray(card.fields) && card.fields.map((field, i) => (\r\n                            <div key={i}>{field}</div>\r\n                          ))}\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          ))}\r\n          {currentColumns.length === 0 && <div>No columns to display</div>}\r\n        </div>\r\n      </DragDropContext>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withStreamlitConnection(KanbanBoard)"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}